# 02-amend-release-notes.yaml
name: Amend Release Notes

on:
  workflow_call:

jobs:
  New-Release:
    runs-on: ubuntu-latest

    strategy:
      fail-fast: true
      matrix:
        python-version: [ '3.12' ]

    permissions:
      contents: write
      id-token: write

    steps:
      - name: Check out repository
        uses: actions/checkout@v5
        with:
          fetch-depth: 0

      - name: Set up Python
        uses: actions/setup-python@v6
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install Poetry
        run: |
          curl -sSL https://install.python-poetry.org | python3 -
          echo "PATH=$HOME/.local/bin:$PATH" >> $GITHUB_ENV

      - name: Decide version bump based on ReleaseAmendment.md first line and bump with Poetry
        id: bump
        shell: bash
        run: |
          set -euo pipefail
          if [ ! -f "ReleaseAmendment.md" ]; then
            echo "ReleaseAmendment.md not found" >&2
            exit 1
          fi
          FIRST_LINE=$(head -n 1 ReleaseAmendment.md | tr '[:upper:]' '[:lower:]')
          BUMP="patch"
          if echo "$FIRST_LINE" | grep -q "feature"; then
            BUMP="minor"
          fi
          if echo "$FIRST_LINE" | grep -Eq "bug|hotfix"; then
            BUMP="patch"
          fi
          echo "Selected bump: $BUMP based on first line: $FIRST_LINE"
          poetry --version
          poetry version "$BUMP"
          NEW_VERSION=$(poetry version -s)
          echo "new_version=$NEW_VERSION" >> "$GITHUB_OUTPUT"

      - name: Amend ReleaseNotes.md with new header and amendment content
        shell: bash
        run: |
          set -euo pipefail
          if [ ! -f "ReleaseNotes.md" ]; then
            echo "ReleaseNotes.md not found" >&2
            exit 1
          fi
          if [ ! -f "ReleaseAmendment.md" ]; then
            echo "ReleaseAmendment.md not found" >&2
            exit 1
          fi
          HEADER_LINE="# Release ${{ steps.bump.outputs.new_version }}"
          SEP_LINE="______________________________________________________________________"
          tmpfile=$(mktemp)
          {
            echo "$HEADER_LINE"
            echo
            # Append ReleaseAmendment.md without the first line (which signals version bump)
            tail -n +2 ReleaseAmendment.md || true
            echo
            echo "$SEP_LINE"
            echo
            cat ReleaseNotes.md
          } > "$tmpfile"
          mv "$tmpfile" ReleaseNotes.md

      - name: Reset ReleaseAmendment.md template
        shell: bash
        run: |
          set -euo pipefail
          echo "Insert the new release notes here
          echo "# Release Note Generation Instructions" > ReleaseAmendment.md
          echo "1.Commit the current changes.  You can run the `pushpy.ps1`" >> ReleaseAmendment.md
          echo "1." >> ReleaseAmendment.md
          echo "1." >> ReleaseAmendment.md
          With AI" >> ReleaseAmendment.md
          echo "Generate the release notes with the following AI prompt in your favourite AI tool like Cursor, Junie or Codex:" >> ReleaseAmendment.md
          echo "```" >> ReleaseAmendment.md
          echo "- Compile the release notes by describing the changes between the current branch and the master branch to ./ReleaseAmendment.md" >> ReleaseAmendment.md
          echo "- The current contents of ./ReleaseAmendment.md must be replaced with the new release notes." >> ReleaseAmendment.md
          echo "- Bump the version appropriately in the pyproject.toml file." >> ReleaseAmendment.md
          echo "- The ./ReleaseAmendment.md will be prefixed to the ReleaseNotes.md file by a GitHub Actions workflow." >> ReleaseAmendment.md
          echo "- It must therefore have the same format as the clauses in the ReleaseNotes.md to be prefixed." >> ReleaseAmendment.md
          echo "- It must start with the heading "Release ?.?.?" where the "?" are replaced with the version number" >> ReleaseAmendment.md
          echo "- It must end with a divider to separate it from the previous release notes." >> ReleaseAmendment.md
          echo "- Do not mention the chore "dummy.txt" that was deleted." >> ReleaseAmendment.md
          echo "- The last section must be a summary of the statistics.  It must include the names of the files that was changed, number of files that was changed, number of insertions, number of deletions and the branch name" >> ReleaseAmendment.md
          echo "```" >> ReleaseAmendment.md
          echo "---"  >> ReleaseAmendment.md
          echo "## Manually"  >> ReleaseAmendment.md
          echo "Use the following template and insert  (replace) it into the ReleaseAmendment.md (this) file" >> ReleaseAmendment.md
          echo "```" >> ReleaseAmendment.md
          echo "# Release ?.?.?" >> ReleaseAmendment.md
          echo "## Summary of Changes" >> ReleaseAmendment.md
          echo "- bla, bla, bla" >> ReleaseAmendment.md
          echo "---" >> ReleaseAmendment.md
          echo "```" >> ReleaseAmendment.md

      - name: Commit and push changes
        shell: bash
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          set -euo pipefail
          git config user.name "github-actions[bot]"
          git config user.email "41898282+github-actions[bot]@users.noreply.github.com"
          git add pyproject.toml ReleaseNotes.md ReleaseAmendment.md
          if git diff --cached --quiet; then
            echo "No changes to commit."
            exit 0
          fi
          git commit -m "chore: bump version to ${{ steps.bump.outputs.new_version }} and amend release notes; reset amendment template"
          git push
