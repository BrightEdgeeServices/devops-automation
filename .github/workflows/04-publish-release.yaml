# 04-publish-release.yaml
name: Build-and-Publish

on:
  workflow_call:
    inputs:
      tag_name:
        description: "Optional: Explicit tag name for the release (e.g., v1.2.3). If omitted, tag is derived from pyproject.toml"
        required: false
        type: string

jobs:
  Publish-New-Release:
    runs-on: ${{ matrix.os }}

    permissions:
      contents: write
      id-token: write

    strategy:
      fail-fast: true
      matrix:
        os: [ 'ubuntu-latest' ]
        python-version: [ '3.12' ]

    steps:
      - name: Check out repository
        uses: actions/checkout@v5
        with:
          fetch-depth: 0

      - name: Set up Python
        uses: actions/setup-python@v6
        with:
          python-version: ${{ matrix.python-version }}

      - name: Compute tag name
        id: compute_tag
        shell: bash
        run: |
          if [ -n "${{ inputs.tag_name }}" ]; then
            echo "Using provided tag: ${{ inputs.tag_name }}"
            echo "tag_name=${{ inputs.tag_name }}" >> "$GITHUB_OUTPUT"
            exit 0
          fi

          python - <<'PY'
          import os
          import pathlib
          import sys
          try:
              import tomllib  # Python 3.11+
          except ModuleNotFoundError:
              print("tomllib is required to parse pyproject.toml", file=sys.stderr)
              sys.exit(1)

          pp = pathlib.Path("pyproject.toml")
          if not pp.exists():
              print("pyproject.toml not found in repository root", file=sys.stderr)
              sys.exit(1)

          data = tomllib.loads(pp.read_text(encoding="utf-8"))
          version = None
          project = data.get("project")
          if isinstance(project, dict):
              version = project.get("version")
          if not version:
              tool = data.get("tool") or {}
              poetry = tool.get("poetry") if isinstance(tool, dict) else None
              if isinstance(poetry, dict):
                  version = poetry.get("version")

          if not version:
              print("Version not found in pyproject.toml under [project].version or [tool.poetry].version", file=sys.stderr)
              sys.exit(1)

          tag = f"v{version}"
          with open(os.environ["GITHUB_OUTPUT"], "a", encoding="utf-8") as fh:
              fh.write(f"tag_name={tag}\n")
          print(f"Derived tag from pyproject.toml: {tag}")
          PY

      - name: New release
        uses: softprops/action-gh-release@v2
        with:
          tag_name:   ${{ steps.compute_tag.outputs.tag_name }}
          name:       ${{ steps.compute_tag.outputs.tag_name }}
          body_path:  ${{ github.workspace }}/ReleaseNotes.md
          draft:      false
          prerelease: false
